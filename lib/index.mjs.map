{"version":3,"sources":["../src/Server/Server.ts","../Logger.ts","../src/Server/Request/Request.ts","../src/Server/Response/Response.ts","../src/Utils.ts","../src/Server/Router/Router.ts","../src/Client/Client.ts","../src/Client/ClientResponse.ts"],"sourcesContent":["import mqtt, { MqttClient } from \"mqtt\";\nimport { log, logError } from \"../../Logger\";\nimport Request from \"./Request/Request\";\nimport Response from \"./Response/Response\";\nimport {\n  ApiRouteType,\n  ControllerType,\n  HttpMethodType,\n  MiddlewareType,\n  ServerOptions,\n} from \"./ServerTypes\";\nimport { Router } from \"./Router/Router\";\nimport { checkDuplicateTopic, validatePath } from \"../Utils\";\nimport { rejects } from \"node:assert\";\n\nexport default class Server {\n  public readonly port: number;\n  public readonly host: string;\n  protected readonly username?: string;\n  protected readonly password?: string;\n  public reconnectionRetries: number;\n\n  protected mqttClient!: MqttClient;\n  protected url: string;\n  protected routes: ApiRouteType = {};\n  protected logs: boolean;\n\n  constructor(options: ServerOptions) {\n    this.port = options.port;\n    this.host = options.host;\n    this.username = options.username;\n    this.password = options.password;\n    this.logs = options.logs ?? false;\n    this.reconnectionRetries = options.reconnectionRetries ?? 1;\n    this.url = `mqtt://${this.host}:${this.port}`;\n  }\n\n  public async connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.mqttClient = mqtt.connect(this.url, {\n          username: this.username,\n          password: this.password,\n        });\n\n        this.setBaseEvents();\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  public disconnect(): void {\n    this.mqttClient.end();\n  }\n\n  public get(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    this.checkConnection();\n\n    path = validatePath(path);\n    checkDuplicateTopic(`SERVER/${HttpMethodType.GET}${path}`, this.routes);\n    this.assignRoutes(\n      `SERVER/${HttpMethodType.GET}${path}`,\n      controller,\n      middlewares,\n    );\n  }\n\n  public post(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    this.checkConnection();\n\n    path = validatePath(path);\n    checkDuplicateTopic(`SERVER/${HttpMethodType.POST}${path}`, this.routes);\n    this.assignRoutes(\n      `SERVER/${HttpMethodType.POST}${path}`,\n      controller,\n      middlewares,\n    );\n  }\n\n  public put(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    this.checkConnection();\n\n    path = validatePath(path);\n    checkDuplicateTopic(`SERVER/${HttpMethodType.PUT}${path}`, this.routes);\n    this.assignRoutes(\n      `SERVER/${HttpMethodType.PUT}${path}`,\n      controller,\n      middlewares,\n    );\n  }\n\n  public patch(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    this.checkConnection();\n\n    path = validatePath(path);\n    checkDuplicateTopic(`SERVER/${HttpMethodType.PATCH}${path}`, this.routes);\n    this.assignRoutes(\n      `SERVER/${HttpMethodType.PATCH}${path}`,\n      controller,\n      middlewares,\n    );\n  }\n\n  public delete(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    this.checkConnection();\n\n    path = validatePath(path);\n    checkDuplicateTopic(`SERVER/${HttpMethodType.DELETE}${path}`, this.routes);\n    this.assignRoutes(\n      `SERVER/${HttpMethodType.DELETE}${path}`,\n      controller,\n      middlewares,\n    );\n  }\n\n  public applyRouter(router: Router) {\n    Object.keys(router.routes).forEach((key) => {\n      checkDuplicateTopic(key, this.routes);\n      Object.assign(this.routes, {\n        [key]: router.routes[key as keyof ApiRouteType],\n      });\n\n      this.setTopicListener(\n        key,\n        router.routes[key as keyof ApiRouteType].controller,\n        router.routes[key as keyof ApiRouteType].middlewares ?? [],\n      );\n    });\n  }\n\n  private assignRoutes(\n    topic: `SERVER/${HttpMethodType}${string}`,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    Object.assign(this.routes, {\n      [topic]: {\n        controller,\n        middlewares,\n      },\n    });\n\n    this.setTopicListener(topic, controller, middlewares);\n  }\n\n  private setTopicListener(\n    topic: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    this.mqttClient.subscribe(topic, { qos: 0 }, (error) => {\n      if (error) {\n        logError(error, `Error setting route ${topic}`);\n      } else {\n        if (this.logs) {\n          log(`Listening for route ${topic}`, true);\n        }\n      }\n    });\n\n    this.mqttClient.on(\"message\", async (receivedTopic, message) => {\n      if (receivedTopic !== topic) {\n        return;\n      }\n\n      const request = new Request(\n        receivedTopic,\n        Buffer.from(message).toString(),\n      );\n      const response = new Response(this.mqttClient, receivedTopic, this.logs);\n\n      if (middlewares) {\n        for (const middleware of middlewares) {\n          await middleware(request, response);\n          if (response.hasBeenSent()) {\n            return;\n          }\n        }\n      }\n\n      return await controller(request, response);\n    });\n  }\n\n  private setBaseEvents(): void {\n    this.mqttClient.on(\"connect\", () => {\n      log(`Connected to ${this.url}`, true);\n    });\n\n    this.mqttClient.on(\"error\", (error: Error) => {\n      logError(error, `Error connecting to ${this.url}`);\n    });\n\n    this.mqttClient.on(\"reconnect\", () => {\n      if (this.reconnectionRetries === 0) {\n        logError(\n          new Error(\"Max retries reached\"),\n          `Error connecting to ${this.url}`,\n        );\n\n        process.exit(1);\n      }\n\n      this.reconnectionRetries -= 1;\n      log(`Trying to reconnect to ${this.url} on port ${this.port}`, true);\n    });\n\n    this.mqttClient.on(\"disconnect\", () => {\n      log(`Disconnected from ${this.url} on port ${this.port}`, true);\n    });\n\n    this.mqttClient.on(\"close\", () => {\n      log(`Closed connection to ${this.url} on port ${this.port}`, true);\n    });\n\n    this.mqttClient.on(\"offline\", () => {\n      log(`Offline connection to ${this.url} on port ${this.port}`, true);\n    });\n\n    this.mqttClient.on(\"end\", () => {\n      log(`End connection to ${this.url} on port ${this.port}`, true);\n    });\n  }\n\n  private checkConnection(): void {\n    if (!this.mqttClient) {\n      logError(\n        new Error(\n          \"Not connected to any MQTT broker, did you forget to call .connect()?\",\n        ),\n      );\n\n      process.exit(1);\n    }\n  }\n}\n","import winston from \"winston\";\n\ninterface LogColors {\n  info: string;\n  warn: string;\n  error: string;\n  [key: string]: string;\n}\n\nconst colors: LogColors = {\n  info: \"\\x1b[32m\",\n  warn: \"\\x1b[33m\",\n  error: \"\\x1b[31m\",\n};\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.printf(({ level, message, timestamp }) => {\n    const color = colors[level] || \"\\x1b[0m\";\n    return `${timestamp} ${color}${level}\\x1b[0m: ${color}${message}\\x1b[0m`;\n  }),\n);\n\nconst consoleTransport = new winston.transports.Console();\nconst fileTransport = new winston.transports.File({ filename: \"logfile.log\" });\n\nconst logger = winston.createLogger({\n  format: logFormat,\n  transports: [consoleTransport, fileTransport],\n});\n\nexport function log(message: string, logs: boolean) {\n  if (!logs) {\n    return;\n  }\n\n  logger.info(\"\\n\" + \"MQTT: üêù \" + message);\n}\n\nexport function logError(error: Error, message?: string) {\n  logger.error(\n    \"\\n\" + \"MQTT: üêù \" + message ? `${message}: ${error.message}` : \"\",\n  );\n}\n\nexport default logger;\n","import { BodyType, HeaderType, RequestBody } from \"./RequestTypes\";\n\nexport default class Request {\n  public qs?: Record<string, string>;\n  public headers?: HeaderType;\n  public body?: BodyType;\n  public url?: string;\n  public method?: string;\n  public buffer?: Buffer;\n  public ctx?: Record<string, any>;\n\n  public constructor(topic: string, message: string) {\n    this.url = topic;\n    let requestBody: RequestBody | null = null;\n    if (message) {\n      requestBody = JSON.parse(message);\n    }\n\n    if (requestBody) {\n      this.qs = requestBody.qs;\n      this.headers = requestBody.headers;\n      this.body = requestBody.body;\n      this.buffer = requestBody.buffer.data;\n      this.method = topic.split(\"/\")[1];\n    }\n  }\n}\n","import { MqttClient } from \"mqtt\";\nimport { StatusCode } from \"./ResponseTypes\";\nimport { log } from \"../../../Logger\";\n\nexport default class Response {\n  protected topic: string;\n  protected mqttClient!: MqttClient;\n  protected logs: boolean = false;\n  protected hasSent: boolean = false;\n\n  public constructor(\n    mqttClient: MqttClient,\n    topic: string,\n    logs: boolean = false,\n  ) {\n    // Base topic has SERVER/{METHOD}{path} for responses the server sends on CLIENT/{METHOD}{path}\n    this.topic = `CLIENT/${topic.split(\"/\").slice(1).join(\"/\")}`;\n    this.mqttClient = mqttClient;\n    this.logs = logs;\n  }\n\n  /**\n   * @Description Sends a response to the client, advised to use the specific method for the response based on the status code\n   * @param body\n   * @param code\n   */\n  public send(body: Record<string, any>, code: StatusCode = 200): void {\n    this.hasSent = true;\n    this.mqttClient.publish(this.topic, this.parseResponse(body, code));\n\n    log(`Published: ${this.topic} -> ${body}`, this.logs);\n  }\n\n  /**\n   * @Description Sends a response to the client with a buffer instead of a json object\n   * @param buffer\n   * @param code\n   */\n  public sendBuffer(buffer: Buffer, code: StatusCode = 200): void {\n    this.mqttClient.publish(this.topic, buffer);\n  }\n\n  public continue(body: Record<string, any>): void {\n    this.send(body, 100);\n  }\n\n  public switchingProtocols(body: Record<string, any>): void {\n    this.send(body, 101);\n  }\n\n  public processing(body: Record<string, any>): void {\n    this.send(body, 102);\n  }\n\n  public earlyHints(body: Record<string, any>): void {\n    this.send(body, 103);\n  }\n\n  public ok(body: Record<string, any>): void {\n    this.send(body, 200);\n  }\n\n  public created(body: Record<string, any>): void {\n    this.send(body, 201);\n  }\n\n  public accepted(body: Record<string, any>): void {\n    this.send(body, 202);\n  }\n\n  public nonAuthoritativeInformation(body: Record<string, any>): void {\n    this.send(body, 203);\n  }\n\n  public noContent(body: Record<string, any>): void {\n    this.send(body, 204);\n  }\n\n  public resetContent(body: Record<string, any>): void {\n    this.send(body, 205);\n  }\n\n  public partialContent(body: Record<string, any>): void {\n    this.send(body, 206);\n  }\n\n  public multiStatus(body: Record<string, any>): void {\n    this.send(body, 207);\n  }\n\n  public alreadyReported(body: Record<string, any>): void {\n    this.send(body, 208);\n  }\n\n  public imUsed(body: Record<string, any>): void {\n    this.send(body, 226);\n  }\n\n  public multipleChoices(body: Record<string, any>): void {\n    this.send(body, 300);\n  }\n\n  public movedPermanently(body: Record<string, any>): void {\n    this.send(body, 301);\n  }\n\n  public found(body: Record<string, any>): void {\n    this.send(body, 302);\n  }\n\n  public seeOther(body: Record<string, any>): void {\n    this.send(body, 303);\n  }\n\n  public notModified(body: Record<string, any>): void {\n    this.send(body, 304);\n  }\n\n  public useProxy(body: Record<string, any>): void {\n    this.send(body, 305);\n  }\n\n  public switchProxy(body: Record<string, any>): void {\n    this.send(body, 306);\n  }\n\n  public temporaryRedirect(body: Record<string, any>): void {\n    this.send(body, 307);\n  }\n\n  public permanentRedirect(body: Record<string, any>): void {\n    this.send(body, 308);\n  }\n\n  public badRequest(body: Record<string, any>): void {\n    this.send(body, 400);\n  }\n\n  public unauthorized(body: Record<string, any>): void {\n    this.send(body, 401);\n  }\n\n  public paymentRequired(body: Record<string, any>): void {\n    this.send(body, 402);\n  }\n\n  public forbidden(body: Record<string, any>): void {\n    this.send(body, 403);\n  }\n\n  public notFound(body: Record<string, any>): void {\n    this.send(body, 404);\n  }\n\n  public methodNotAllowed(body: Record<string, any>): void {\n    this.send(body, 405);\n  }\n\n  public notAcceptable(body: Record<string, any>): void {\n    this.send(body, 406);\n  }\n\n  public proxyAuthenticationRequired(body: Record<string, any>): void {\n    this.send(body, 407);\n  }\n\n  public requestTimeout(body: Record<string, any>): void {\n    this.send(body, 408);\n  }\n\n  public conflict(body: Record<string, any>): void {\n    this.send(body, 409);\n  }\n\n  public gone(body: Record<string, any>): void {\n    this.send(body, 410);\n  }\n\n  public lengthRequired(body: Record<string, any>): void {\n    this.send(body, 411);\n  }\n\n  public preconditionFailed(body: Record<string, any>): void {\n    this.send(body, 412);\n  }\n\n  public payloadTooLarge(body: Record<string, any>): void {\n    this.send(body, 413);\n  }\n\n  public uriTooLong(body: Record<string, any>): void {\n    this.send(body, 414);\n  }\n\n  public unsupportedMediaType(body: Record<string, any>): void {\n    this.send(body, 415);\n  }\n\n  public rangeNotSatisfiable(body: Record<string, any>): void {\n    this.send(body, 416);\n  }\n\n  public expectationFailed(body: Record<string, any>): void {\n    this.send(body, 417);\n  }\n\n  public imATeapot(body: Record<string, any>): void {\n    this.send(body, 418);\n  }\n\n  public misdirectedRequest(body: Record<string, any>): void {\n    this.send(body, 421);\n  }\n\n  public unprocessableEntity(body: Record<string, any>): void {\n    this.send(body, 422);\n  }\n\n  public locked(body: Record<string, any>): void {\n    this.send(body, 423);\n  }\n\n  public failedDependency(body: Record<string, any>): void {\n    this.send(body, 424);\n  }\n\n  public tooEarly(body: Record<string, any>): void {\n    this.send(body, 425);\n  }\n\n  public upgradeRequired(body: Record<string, any>): void {\n    this.send(body, 426);\n  }\n\n  public preconditionRequired(body: Record<string, any>): void {\n    this.send(body, 428);\n  }\n\n  public tooManyRequests(body: Record<string, any>): void {\n    this.send(body, 429);\n  }\n\n  public requestHeaderFieldsTooLarge(body: Record<string, any>): void {\n    this.send(body, 431);\n  }\n\n  public unavailableForLegalReasons(body: Record<string, any>): void {\n    this.send(body, 451);\n  }\n\n  public internalServerError(body: Record<string, any>): void {\n    this.send(body, 500);\n  }\n\n  public notImplemented(body: Record<string, any>): void {\n    this.send(body, 501);\n  }\n\n  public badGateway(body: Record<string, any>): void {\n    this.send(body, 502);\n  }\n\n  public serviceUnavailable(body: Record<string, any>): void {\n    this.send(body, 503);\n  }\n\n  public gatewayTimeout(body: Record<string, any>): void {\n    this.send(body, 504);\n  }\n\n  public httpVersionNotSupported(body: Record<string, any>): void {\n    this.send(body, 505);\n  }\n\n  public variantAlsoNegotiates(body: Record<string, any>): void {\n    this.send(body, 506);\n  }\n\n  public insufficientStorage(body: Record<string, any>): void {\n    this.send(body, 507);\n  }\n\n  public loopDetected(body: Record<string, any>): void {\n    this.send(body, 508);\n  }\n\n  public notExtended(body: Record<string, any>): void {\n    this.send(body, 510);\n  }\n\n  public networkAuthenticationRequired(body: Record<string, any>): void {\n    this.send(body, 511);\n  }\n\n  /**\n   * @description Returns if the response has been sent to the client - only one response can be sent, if you return something in a middleware, all the chain of middlewares and the controller will be stopped\n   */\n  public hasBeenSent(): boolean {\n    return this.hasSent;\n  }\n\n  private parseResponse(\n    body: Record<string, any> | Buffer,\n    statusCode: StatusCode,\n  ): string | Buffer {\n    if (Buffer.isBuffer(body)) {\n      return body;\n    }\n\n    return JSON.stringify({\n      statusCode,\n      body,\n    });\n  }\n}\n","import { logError } from \"../Logger\";\nimport { ApiRouteType } from \"./Server/ServerTypes\";\n\nexport function validatePath(str: string): string {\n  if (!str.startsWith(\"/\")) {\n    str = `/${str}`;\n  }\n\n  if (!str.endsWith(\"/\")) {\n    str = `${str}/`;\n  }\n\n  return str.replace(/\\/+/g, \"/\");\n}\n\nexport function checkDuplicateTopic(\n  topic: string,\n  inputRoutes: ApiRouteType,\n): void {\n  const routes = Object.keys(inputRoutes);\n  if (routes.includes(topic)) {\n    logError(new Error(\"Duplicate route\"), `Route ${topic} already exists`);\n    process.exit(1);\n  }\n}\n","import {\n  ApiRouteType,\n  ControllerType,\n  HttpMethodType,\n  MiddlewareType,\n} from \"../ServerTypes\";\nimport { checkDuplicateTopic, validatePath } from \"../../Utils\";\n\nexport class Router {\n  protected internalPrefix?: string;\n  protected middlewares?: MiddlewareType[];\n  public routes: ApiRouteType = {};\n\n  constructor(prefix?: string, middlewares?: MiddlewareType[]) {\n    this.internalPrefix = prefix ? validatePath(prefix) : undefined;\n    this.middlewares = middlewares;\n  }\n\n  public group(\n    cb: (router: Router) => void,\n    prefix?: string,\n    middlewares?: MiddlewareType[],\n  ): Router {\n    const newPrefix = `${this.internalPrefix || \"\"}/${prefix || \"\"}`;\n    const newMiddlewares = [\n      ...(this.middlewares ?? []),\n      ...(middlewares ?? []),\n    ];\n    const router = new Router(\n      newPrefix === \"/\" ? undefined : validatePath(newPrefix),\n      newMiddlewares,\n    );\n    cb(router);\n    this.applyRoutes(router);\n\n    return this;\n  }\n\n  public get(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    if (this.internalPrefix) {\n      path = validatePath(`${this.internalPrefix}${path}`);\n    }\n\n    checkDuplicateTopic(`SERVER/${HttpMethodType.GET}${path}`, this.routes);\n    Object.assign(this.routes, {\n      [`SERVER/${HttpMethodType.GET}${path}`]: {\n        controller: controller,\n        middlewares: [...(this.middlewares ?? []), ...(middlewares ?? [])],\n      },\n    });\n  }\n\n  public post(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    if (this.internalPrefix) {\n      path = validatePath(`${this.internalPrefix}${path}`);\n    }\n\n    console.log(path);\n    checkDuplicateTopic(`SERVER/${HttpMethodType.POST}${path}`, this.routes);\n    Object.assign(this.routes, {\n      [`SERVER/${HttpMethodType.POST}${path}`]: {\n        controller: controller,\n        middlewares: [...(this.middlewares ?? []), ...(middlewares ?? [])],\n      },\n    });\n  }\n\n  public put(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    if (this.internalPrefix) {\n      path = validatePath(`${this.internalPrefix}${path}`);\n    }\n\n    checkDuplicateTopic(`SERVER/${HttpMethodType.PUT}${path}`, this.routes);\n    Object.assign(this.routes, {\n      [`SERVER/${HttpMethodType.PUT}${path}`]: {\n        controller: controller,\n        middlewares: [...(this.middlewares ?? []), ...(middlewares ?? [])],\n      },\n    });\n  }\n\n  public patch(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    if (this.internalPrefix) {\n      path = validatePath(`${this.internalPrefix}${path}`);\n    }\n\n    checkDuplicateTopic(`SERVER/${HttpMethodType.PATCH}${path}`, this.routes);\n    Object.assign(this.routes, {\n      [`SERVER/${HttpMethodType.PATCH}${path}`]: {\n        controller: controller,\n        middlewares: [...(this.middlewares ?? []), ...(middlewares ?? [])],\n      },\n    });\n  }\n\n  public delete(\n    path: string,\n    controller: ControllerType,\n    middlewares?: MiddlewareType[],\n  ): void {\n    if (this.internalPrefix) {\n      path = validatePath(`${this.internalPrefix}${path}`);\n    }\n\n    checkDuplicateTopic(`SERVER/${HttpMethodType.DELETE}${path}`, this.routes);\n    Object.assign(this.routes, {\n      [`SERVER/${HttpMethodType.DELETE}${path}`]: {\n        controller: controller,\n        middlewares: [...(this.middlewares ?? []), ...(middlewares ?? [])],\n      },\n    });\n  }\n\n  protected applyRoutes(router: Router) {\n    console.log(router);\n    Object.keys(router.routes).forEach((key) => {\n      checkDuplicateTopic(key, this.routes);\n      Object.assign(this.routes, {\n        [key]: {\n          controller: router.routes[key as keyof ApiRouteType].controller,\n          middlewares: router.routes[key as keyof ApiRouteType].middlewares,\n        },\n      });\n    });\n  }\n}\n\nexport default new Router();\n","import { FlynestClientOptions, HttpMethod } from \"./ClientTypes\";\nimport mqtt, { MqttClient } from \"mqtt\";\nimport ClientResponse from \"./ClientResponse\";\nimport { BodyType, HeaderType } from \"../Server/Request/RequestTypes\";\nimport { validatePath } from \"../Utils\";\nimport { log } from \"../../Logger\";\nimport { HttpMethodType } from \"../Server/ServerTypes\";\n\nclass FlynestClient {\n  protected mqttClient: MqttClient;\n  protected brokerHost?: string;\n  protected port?: number;\n  protected brokerUrl?: string;\n  protected username?: string;\n  protected password?: string;\n  protected logs: boolean;\n\n  /**\n   * @Description Creates a new FlynestClient - for the broker you can use either broker host or broker url, mqttClient takes precedence, then broker url and finally broker host\n   * @param options {FlynestClientOptions}\n   */\n  public constructor(options: FlynestClientOptions) {\n    if (!options.brokerHost && !options.brokerUrl && !options.mqttClient) {\n      throw new Error(\"Broker host, mqtt client or broker url is required\");\n    }\n\n    if (options.brokerHost && !options.port) {\n      throw new Error(\"Port is required when using broker host\");\n    }\n\n    this.brokerHost = options.brokerHost;\n    this.port = options.port;\n    this.brokerUrl = options.brokerUrl;\n    this.username = options.username;\n    this.password = options.password;\n    this.logs = options.logs ?? false;\n\n    if (!options.mqttClient) {\n      this.mqttClient = mqtt.connect(\n        this.brokerUrl || `mqtt://${this.brokerHost}:${this.port}`,\n        {\n          username: this.username,\n          password: this.password,\n        },\n      );\n\n      if (!this.mqttClient) {\n        throw new Error(\"Failed to connect to MQTT broker\");\n      }\n\n      log(\n        `Connected to ${this.brokerUrl || `mqtt://${this.brokerHost}:${this.port}`}`,\n        this.logs,\n      );\n      return;\n    }\n\n    this.mqttClient = options.mqttClient;\n  }\n\n  public async get(\n    path: string,\n    {\n      headers,\n      queryParams,\n    }: {\n      headers?: HeaderType;\n      queryParams?: Record<string, string>;\n    },\n  ): Promise<ClientResponse> {\n    path = validatePath(path);\n    const requestTopic = `SERVER/${HttpMethodType.GET}${path}`;\n    let requestBody = {};\n\n    if (headers) {\n      requestBody = { ...requestBody, ...headers };\n    }\n\n    if (queryParams) {\n      requestBody = { ...requestBody, ...queryParams };\n    }\n\n    this.mqttClient.publish(requestTopic, JSON.stringify(requestBody));\n    this.mqttClient.subscribe(requestTopic.replace(\"SERVER\", \"CLIENT\"));\n    return this.awaitRequest(requestTopic);\n  }\n\n  public async post(\n    path: string,\n    {\n      headers,\n      body,\n      buffer,\n      queryParams,\n    }: {\n      headers?: HeaderType;\n      body?: BodyType;\n      buffer?: Buffer;\n      queryParams?: Record<string, string>;\n    },\n  ): Promise<ClientResponse> {\n    path = validatePath(path);\n    const requestTopic = `SERVER/${HttpMethodType.POST}${path}`;\n    let requestBody = {};\n\n    if (headers) {\n      requestBody = { ...requestBody, ...headers };\n    }\n\n    if (queryParams) {\n      requestBody = { ...requestBody, ...queryParams };\n    }\n\n    if (body) {\n      requestBody = { ...requestBody, ...body };\n    }\n\n    if (buffer) {\n      requestBody = { ...requestBody, buffer: buffer };\n    }\n\n    this.mqttClient.publish(requestTopic, JSON.stringify(requestBody));\n    this.mqttClient.subscribe(requestTopic.replace(\"SERVER\", \"CLIENT\"));\n    return this.awaitRequest(requestTopic);\n  }\n\n  public async patch(\n    path: string,\n    {\n      headers,\n      body,\n      queryParams,\n    }: {\n      headers?: HeaderType;\n      body?: BodyType;\n      queryParams?: Record<string, string>;\n    },\n  ): Promise<ClientResponse> {\n    path = validatePath(path);\n    const requestTopic = `SERVER/${HttpMethodType.PATCH}${path}`;\n    let requestBody = {};\n\n    if (headers) {\n      requestBody = { ...requestBody, ...headers };\n    }\n\n    if (queryParams) {\n      requestBody = { ...requestBody, ...queryParams };\n    }\n\n    if (body) {\n      requestBody = { ...requestBody, ...body };\n    }\n\n    this.mqttClient.publish(requestTopic, JSON.stringify(requestBody));\n    this.mqttClient.subscribe(requestTopic.replace(\"SERVER\", \"CLIENT\"));\n    return this.awaitRequest(requestTopic);\n  }\n\n  public async put(\n    path: string,\n    {\n      headers,\n      body,\n      queryParams,\n    }: {\n      headers?: HeaderType;\n      body?: BodyType;\n      queryParams?: Record<string, string>;\n    },\n  ): Promise<ClientResponse> {\n    path = validatePath(path);\n    const requestTopic = `SERVER/${HttpMethodType.PUT}${path}`;\n    let requestBody = {};\n\n    if (headers) {\n      requestBody = { ...requestBody, ...headers };\n    }\n\n    if (queryParams) {\n      requestBody = { ...requestBody, ...queryParams };\n    }\n\n    if (body) {\n      requestBody = { ...requestBody, ...body };\n    }\n\n    this.mqttClient.publish(requestTopic, JSON.stringify(requestBody));\n    this.mqttClient.subscribe(requestTopic.replace(\"SERVER\", \"CLIENT\"));\n    return this.awaitRequest(requestTopic);\n  }\n\n  public async delete(\n    path: string,\n    {\n      headers,\n      queryParams,\n    }: {\n      headers?: HeaderType;\n      queryParams?: Record<string, string>;\n    },\n  ): Promise<ClientResponse> {\n    path = validatePath(path);\n    const requestTopic = `SERVER/${HttpMethodType.DELETE}${path}`;\n    let requestBody = {};\n\n    if (headers) {\n      requestBody = { ...requestBody, ...headers };\n    }\n\n    if (queryParams) {\n      requestBody = { ...requestBody, ...queryParams };\n    }\n\n    this.mqttClient.publish(requestTopic, JSON.stringify(requestBody));\n    this.mqttClient.subscribe(requestTopic.replace(\"SERVER\", \"CLIENT\"));\n    return this.awaitRequest(requestTopic);\n  }\n\n  private async awaitRequest(requestTopic: string): Promise<ClientResponse> {\n    return new Promise((resolve, reject) => {\n      this.mqttClient.on(\"message\", (topic, message) => {\n        if (requestTopic.replace(\"SERVER\", \"CLIENT\") === topic) {\n          let parsedMessage = Buffer.from(message).toString();\n          if (JSON.parse(parsedMessage)) {\n            parsedMessage = JSON.parse(parsedMessage);\n          }\n\n          resolve(new ClientResponse(topic, parsedMessage));\n        }\n      });\n\n      this.mqttClient.on(\"error\", (error: Error) => {\n        reject(error);\n      });\n    });\n  }\n}\n\nexport default FlynestClient;\n","export default class ClientResponse {\n  protected topic: string;\n  protected data: Object | Buffer;\n\n  public constructor(topic: string, body: Object | Buffer) {\n    this.topic = topic;\n    this.data = body;\n  }\n}\n"],"mappings":"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","names":["mqtt","mqtt"]}